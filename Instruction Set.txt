FORMAT: <OPCODE> <DESTINATION>, <SOURCE> 
          	        Operation    Code (Hex)
Load A:     	    LOD A, []	     10
Store A:    	    STO [], A        11
Load B:             LOD B, []        12
Store B:            STO [], B        13
Load SP:            LOD SP, []       14
Store SP, A         STO SP, A        15     (Stores value of A in RAM at location in SP, only 1 byte)
Load B, SP          LOD B, SP        16     (Loads value at SP into B)
Add A:      	    ADD A, []        20
Subtract A: 	    SUB A, []        21
Add With Carry A:   ADC	A, []        22
Jump:               JMP []           30
Jump If Zero:       JZ []            31
Jump If Carry:      JC []            32
Jump If Not Zero:   JNZ []           33
Jump If Not Carry:  JNC	[]	         34
Move A, B           MOV A, B         40     (Only requires 1 byte)
Move B, A           MOV B, A         41     (Only requires 1 byte)
Move A, SP          MOV A, SP        42     (Only requires 1 byte)     
Move SP, A          MOV SP, A        43     (Only requires 1 byte)
Push                PUSH SP, A       COMPOSITE: 41 00 42 00 21 01 43 00 40 00 15 00 
Pop                 POP A, SP        COMPOSITE: 16 00 10 02 15 00 42 00 20 01 43 00 
Halt:               HLT              FF     (Only requires 1 byte)

Notes:
- STO SP, A is still quite buggy and will cause data at 00 to also be changed. Therefore, data at location 00 should
      not be used if STO SP, A is used.
- Stack pointer should first be assigned to 00, and the data at 01 should be 01 when using PUSH or POP
- A stands for ACC, [address] is used to get data at that address in RAM written in hex and [] is usually the input.
- Instructions that require only 1 byte will be in the format: <OPCODE> 00
- COMPOSITE referes to instructions that are made up of smaller instructions as shown below:

COMPOSITES:
    Let data at 01 be 01. 
    PUSH SP, A:
        # Save A in B
        MOV B, A
        # Decrement
        MOV A, SP
        SUB A, [01]
        MOV SP, A
        # Store
        MOV A, B
        STO SP, A 
    PUSH SP, A = 41 00 42 00 21 01 43 00 40 00 15 00 

    Let data at 02 be 00
    POP A, SP:
        # Load data at SP in B
        LOD B, SP
        # Delete data at SP
        LOD A, [02]
        STO SP, A
        # Increment SP
        MOV A, SP
        ADD A, [01]
        MOV SP, A
    POP A, SP = 16 00 10 02 15 00 42 00 20 01 43 00 


